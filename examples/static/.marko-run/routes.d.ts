/*
  WARNING: This file is automatically generated and any changes made to it will be overwritten without warning.
  Do NOT manually edit this file or your changes will be lost.
*/

import type { HandlerLike, Route as AnyRoute, Context as AnyContext, ValidatePath, ValidateHref } from "@marko/run";
declare module '@marko/run' {
  interface ContextExtensions {
    platform: {}
  }
}


declare global {
  namespace MarkoRun {
    type GetPaths =
      | '/'
      | '/users';

    type PostPaths =;

    type GetablePath<T extends string> = ValidatePath<GetPaths, T>;
    type GetableHref<T extends string> = ValidateHref<GetPaths, T>; 
    type PostablePath<T extends string> = ValidatePath<PostPaths, T>;
    type PostableHref<T extends string> = ValidateHref<PostPaths, T>; 
  }
}
interface Route1 extends AnyRoute<{}, undefined, `/`> {}
interface Route2 extends AnyRoute<{}, undefined, `/users`> {}

declare module '../src/routes/+page.marko' {
  export interface Input {}

  namespace MarkoRun {
    type Route = Route1;
    type Context = AnyContext<AnyContext['platform'], Route>;
  }
}

declare module '../src/routes/users/+page.marko' {
  export interface Input {}

  namespace MarkoRun {
    type Route = Route2;
    type Context = AnyContext<AnyContext['platform'], Route>;
  }
}

declare module '../src/routes/+layout.marko' {
  export interface Input {
    renderBody: Marko.Body;
  }

  namespace MarkoRun {
    type Route = Route1 | Route2;
    type Context = AnyContext<AnyContext['platform'], Route>;
  }
}

declare module '../src/routes/+404.marko' {
  export interface Input {}

  namespace MarkoRun {
    type Route = AnyRoute;
    type Context = AnyContext<AnyContext['platform'], Route>;
  }
}
