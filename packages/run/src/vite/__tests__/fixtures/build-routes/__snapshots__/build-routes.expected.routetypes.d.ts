/*
  WARNING: This file is automatically generated and any changes made to it will be overwritten without warning.
  Do NOT manually edit this file or your changes will be lost.
*/
  
import type { HandlerLike, Route } from "@marko/run";
    
interface Route1 extends Route<{}, undefined, `/`> {}
interface Route2 extends Route<{}, typeof import('./_protected/_home/new/+meta.json'), `/new`> {}
interface Route3 extends Route<{ id: string; }, undefined, `/notes/:id`> {}
interface Route4 extends Route<{ id: string; }, typeof import('./_protected/_home/notes/$id/comments/+meta')['default'], `/notes/:id/comments`> {}
interface Route5 extends Route<{}, undefined, `/callback/oauth2`> {}
interface Route6 extends Route<{}, undefined, `/my`> {}
interface Route7 extends Route<{ match: string; }, undefined, `/:match*`> {}

declare module './_protected/_home/new/+handler.post' {
  namespace Marko {
    type CurrentRoute = Route2;
    type Handler<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']> = HandlerLike<CurrentRoute>;
    function route(handler: Handler): typeof handler;
    function route<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']>(handler: Handler): typeof handler;
  }
}

declare module './_protected/_home/notes/$id/+handler.post' {
  namespace Marko {
    type CurrentRoute = Route3;
    type Handler<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']> = HandlerLike<CurrentRoute>;
    function route(handler: Handler): typeof handler;
    function route<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']>(handler: Handler): typeof handler;
  }
}

declare module './_protected/_home/notes/$id/comments/+handler.post' {
  namespace Marko {
    type CurrentRoute = Route4;
    type Handler<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']> = HandlerLike<CurrentRoute>;
    function route(handler: Handler): typeof handler;
    function route<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']>(handler: Handler): typeof handler;
  }
}

declare module './callback/oauth2/+handler.get' {
  namespace Marko {
    type CurrentRoute = Route5;
    type Handler<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']> = HandlerLike<CurrentRoute>;
    function route(handler: Handler): typeof handler;
    function route<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']>(handler: Handler): typeof handler;
  }
}

declare module './my/+handler.get' {
  namespace Marko {
    type CurrentRoute = Route6;
    type Handler<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']> = HandlerLike<CurrentRoute>;
    function route(handler: Handler): typeof handler;
    function route<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']>(handler: Handler): typeof handler;
  }
}

declare module './$$match/+handler.get' {
  namespace Marko {
    type CurrentRoute = Route7;
    type Handler<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']> = HandlerLike<CurrentRoute>;
    function route(handler: Handler): typeof handler;
    function route<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']>(handler: Handler): typeof handler;
  }
}

declare module './+middleware' {
  namespace Marko {
    type CurrentRoute = Route1 | Route2 | Route3 | Route4 | Route5 | Route6 | Route7;
    type Handler<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']> = HandlerLike<CurrentRoute>;
    function route(handler: Handler): typeof handler;
    function route<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']>(handler: Handler): typeof handler;
  }
}

declare module './_protected/+middleware' {
  namespace Marko {
    type CurrentRoute = Route1 | Route2 | Route3 | Route4;
    type Handler<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']> = HandlerLike<CurrentRoute>;
    function route(handler: Handler): typeof handler;
    function route<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']>(handler: Handler): typeof handler;
  }
}

declare module './_protected/_home/+middleware' {
  namespace Marko {
    type CurrentRoute = Route1 | Route2 | Route3 | Route4;
    type Handler<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']> = HandlerLike<CurrentRoute>;
    function route(handler: Handler): typeof handler;
    function route<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']>(handler: Handler): typeof handler;
  }
}

declare module './_protected/_home/notes/$id/+middleware' {
  namespace Marko {
    type CurrentRoute = Route3 | Route4;
    type Handler<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']> = HandlerLike<CurrentRoute>;
    function route(handler: Handler): typeof handler;
    function route<_Params = CurrentRoute['params'], _Meta = CurrentRoute['meta']>(handler: Handler): typeof handler;
  }
}
