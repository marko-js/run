/*
  WARNING: This file is automatically generated and any changes made to it will be overwritten without warning.
  Do NOT manually edit this file or your changes will be lost.
*/

import "@marko/run/namespace";
import type Run from "@marko/run";


declare module "@marko/run" {
	interface AppData extends Run.DefineApp<{
		routes: {
			"/": { verb: "get" };
			"/new": {
				verb: "get" | "post";
				meta: typeof import("./_protected/_home/new/+meta.json");
			};
			"/notes/:id": { verb: "get" | "post" };
			"/notes/:id/comments": {
				verb: "post";
				meta: typeof import("./_protected/_home/notes/$id/comments/+meta")["default"];
			};
			"/callback/oauth2": { verb: "get" };
			"/my": { verb: "get" };
			"/:match*": { verb: "get" };
		}
	}> {}
}

declare module "./_protected/_home/new/+handler.post" {
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/new"];
    export type Context = Run.MultiRouteContext<Route>;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./_protected/_home/notes/$id/+handler.put_post_delete" {
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/notes/:id"];
    export type Context = Run.MultiRouteContext<Route>;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./_protected/_home/notes/$id/comments/+handler.put_post_delete" {
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/notes/:id/comments"];
    export type Context = Run.MultiRouteContext<Route>;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./callback/oauth2/+handler.get" {
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/callback/oauth2"];
    export type Context = Run.MultiRouteContext<Route>;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./my/+handler.get" {
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/my"];
    export type Context = Run.MultiRouteContext<Route>;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./$$match/+handler.get" {
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/:match*"];
    export type Context = Run.MultiRouteContext<Route>;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./+middleware" {
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/" | "/new" | "/notes/:id" | "/notes/:id/comments" | "/callback/oauth2" | "/my" | "/:match*"];
    export type Context = Run.MultiRouteContext<Route>;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./_protected/+middleware" {
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/" | "/new" | "/notes/:id" | "/notes/:id/comments"];
    export type Context = Run.MultiRouteContext<Route>;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./_protected/_home/+middleware" {
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/" | "/new" | "/notes/:id" | "/notes/:id/comments"];
    export type Context = Run.MultiRouteContext<Route>;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./_protected/_home/notes/$id/+middleware" {
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/notes/:id" | "/notes/:id/comments"];
    export type Context = Run.MultiRouteContext<Route>;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./_protected/_home/+page.marko" {
  export interface Input {
    renderBody: Marko.Body;
  }
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/"];
    export type Context = Run.MultiRouteContext<Route> & Marko.Global;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./_protected/_home/new/+page.marko" {
  export interface Input {
    renderBody: Marko.Body;
  }
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/new"];
    export type Context = Run.MultiRouteContext<Route> & Marko.Global;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./_protected/_home/notes/$id/+page.marko" {
  export interface Input {
    renderBody: Marko.Body;
  }
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/notes/:id"];
    export type Context = Run.MultiRouteContext<Route> & Marko.Global;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./my/+page.marko" {
  export interface Input {
    renderBody: Marko.Body;
  }
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/my"];
    export type Context = Run.MultiRouteContext<Route> & Marko.Global;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./+layout.marko" {
  export interface Input {
    renderBody: Marko.Body;
  }
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/" | "/new" | "/notes/:id" | "/my"];
    export type Context = Run.MultiRouteContext<Route> & Marko.Global;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./_protected/_home/+layout.marko" {
  export interface Input {
    renderBody: Marko.Body;
  }
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Routes["/" | "/new" | "/notes/:id"];
    export type Context = Run.MultiRouteContext<Route> & Marko.Global;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./+404.marko" {
  export interface Input {}
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = Run.Route;
    export type Context = Run.MultiRouteContext<Route> & Marko.Global;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}

declare module "./+500.marko" {
  export interface Input {
    error: unknown;
  }
  namespace MarkoRun {
    export * from "@marko/run/namespace";
    export type Route = globalThis.MarkoRun.Route;
    export type Context = Run.MultiRouteContext<Route> & Marko.Global;
    export type Handler = Run.HandlerLike<Route>;
    export const route: Run.HandlerTypeFn<Handler>;
  }
}
